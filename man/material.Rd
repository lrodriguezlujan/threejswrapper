% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/materials.R
\name{materialThreeJS}
\alias{lambertMaterial}
\alias{material}
\alias{materialThreeJS}
\title{ThreeJS surface material}
\usage{
materialThreeJS(builder, opacity = 1)

lambertMaterial(color = "#ffffff", fog = F, wireframe = F, opacity = 1,
  ...)
}
\arguments{
\item{builder}{Javascript function that builds the geometry}

\item{opacity}{Opacity value. See \link{materialThreeJS}}

\item{color}{Material color (either a RGB string or a valid name)}

\item{fog}{Define whether the material color is affected by global fog settings}

\item{wireframe}{Render as wireframe}

\item{params}{Unnamed list or vector with the arguments for the builder function}

\item{\dots}{Any valid argument for MeshLamberMaterial (\url{http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial})}
}
\description{
Object surface material definition.
}
\details{
\code{lambertMaterial} Creates a lambert material instance
}
\note{
Material constructors in threeJS admit an object as parameter and doesnt need to be rotated, translated, etc in any way.
Therefore, builder call in JS side is only func( params ) instead of Function.prototype.apply( func, params ). Please, consider
this if you add a new material.
}
\examples{
m <- lambertMaterial(color = "red")
}

